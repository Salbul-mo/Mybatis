<?xml version="1.0" encoding="UTF-8" ?>
<!-- SQL Mapper 파일은 xml 이기 때문에 제일 먼저 xml 선언문이 온다. -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
      태그 규칙을 정의한 DTD 선언
      DTD란 문서 형식 정의 (Document Type Definition, DTD) 라는 컴퓨터 용어로, SGML 계열의 마크업 언어에서
      문서 형식을 정의하는 것이다.
      SGML 을 비롯해 HTML, XHTML, XML 등에서 쓰인다.
-->

<!--
      SQL Mapper 파일은 루트 엘리먼트 <mapper> 를 작성하는 것으로 시작
      프로젝트에서는 기본적으로 여러개의 <mapper> 를 가지기 때문에 중복되는
      이름을 가진 SQL 문이 존재할 수 있다.

      따라서 각 <mapper> 마다 namespace 속성을 이용하여 <mapper>를 구분한다.
 -->

<mapper namespace="org.hta.mybatis.member">

  <!--
      ① id 속성 : SQL 문을 작성할 때 각각의 SQL 문을 구분하기 위해 id 속성을 사용한다.

      ② parameterType 속성 : SQL 문에 값을 전달하기 위해 파라미터의 자료형을 작성한다.
         마이바티스의 입력 매개 변수를 #{프로퍼티명} #{이름상관없음} 으로 표시한다.
         (1) parameterType="Member" 인 경우 #{프로퍼티명} 으로 사용한다.
         (2) parameterType 이 기본형이나 String 인 경우 어떤 이름을 사용해도 상관없다.
                parameterType="String" :
                parameterType 은 DAO 에서
                  session.selectOne("org.hta.mybatis.member.select",id) 문장의
                  두 번째 매개변수의 자료형이다.

                #{inputid} : id 의 값을 사용하기 위해 어떤 이름을 사용해도 무방하다.
                => 매개변수의 자료형이 기본형이나 String 인 경우 어떤 이름을 사용해도 상관 없다.

       ③ resultType 속성 : select 문의 실행 결과를 담을 객체를 지정한다.
       - 마이바티스 설정 파일 (sqlMapConfig.xml) 에 별명이 정의되어 있으면 별명을 사용할 수 있다.
       - 마이바티스는 select 결과를 저장하고자 resultType 에 선언된 클래스의 인스턴스를 생성한다.
          그리고 각 컬럼에 대응하는 setter 메서드를 찾아 호출한다.
       - 컬럼의 이름과 일치하는 setter 가 없다면 해당 컬럼의 값은 인스턴스에 저장되지 않는다.
  -->

  <select id="select" parameterType="String" resultType="Member">
    select *
    from member22
    where id = #{inputid}
  </select>

  <!--
       parameterType="Member" 인 경우
       #{id} : Member 객체의 프로퍼티 값이 적용된다.
        org.hta.member.domain.Member.java 의
        public String getId() {
        return id;
        }
        값이 반환되어 적용된다.

        #{password} : Member 객체의 프로퍼티 값이 적용된다.
        org.hta.member.domain.Member.java 의
        public String getPassword() {
        return password;
        }
        값이 반환되어 적용된다.
  -->
  <insert id="insert" parameterType="org.hta.member.domain.Member"> <!-- parameterType="Member" -->
    insert into member22
    values
    (#{id}, #{password})
  </insert>

  <select id="list" resultType="Member">
    select *
    from member22
    order by id
  </select>

  <update id="update" parameterType="org.hta.member.domain.Member">
    update member22
    set password = #{password}
    where id = #{id}
  </update>

  <delete id="delete" parameterType="String">
    delete member22
    where id = #{inputid}
  </delete>
</mapper>